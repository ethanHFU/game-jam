[gd_scene load_steps=5 format=3 uid="uid://ca3paxeho75xj"]

[ext_resource type="Script" uid="uid://ciai0u317585a" path="res://Scripts/demos/wave_test.gd" id="1_crlxb"]

[sub_resource type="Shader" id="Shader_j7jhb"]
code = "shader_type spatial;
render_mode unshaded;

global uniform vec3 wave_origin;
instance uniform float expand_wave;

uniform float debug_time;
uniform float max_radius = 10.0;

uniform float world_scaling = 1.0;
uniform float fade_distance = 2.0; // Distance after second wave to start fading
uniform vec3 col_1 : source_color = vec3(0.0, 0.54, 1.0);
uniform vec3 col_2 : source_color = vec3(0.21, 0.74, 1.0);
uniform vec3 foam_color : source_color = vec3(1.0, 1.0, 1.0);
uniform float foam_strength = 1.0;

varying float d;
varying float foam;

void vertex() {
	vec3 world_vertex = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	vec3 wave_center = world_vertex - wave_origin;

	d = length(vec2(VERTEX.x, VERTEX.z)) * (1.0 / world_scaling);

	//float w1 = abs(d - debug_time + 2.0);
	float w1 = abs(d - expand_wave + 2.0);
	w1 = smoothstep(0.0, 1.0, w1 * 0.5);
	w1 -= 0.6;

	//float w2 = abs(d - debug_time + 6.5);
	float w2 = abs(d - expand_wave + 6.5);
	w2 = smoothstep(0.0, 1.0, w2 * 0.5) * 2.0;

	float w = w1 * w2;

	VERTEX.y = -w + 0.75;

	foam = smoothstep(0.0, 1.0, VERTEX.y);
}

void fragment() {
	// Blend base color using wave distance
	if (expand_wave <= max_radius){
		vec3 base_col = mix(col_1, col_2, smoothstep(0.0, 10.0, d));
		vec3 final_col = mix(base_col, foam_color, foam * foam_strength);
		ALBEDO = final_col;
		ALPHA = 1.0 - smoothstep(0.0, 10.0, d);
	}

	else {
		// Fade out based on how far past max_radius we are
		float fade_timespan = 3.0;
		float fade = 1.0 - smoothstep(0.0, fade_timespan, expand_wave - max_radius);
		fade = clamp(fade, 0.0, 1.0);

		vec3 base_col = mix(col_1, col_2, smoothstep(0.0, 10.0, d));
		vec3 final_col = mix(base_col, foam_color, foam * foam_strength);
		ALBEDO = final_col * fade;
		ALPHA = fade * (1.0 - smoothstep(0.0, 10.0, d));
	}

	// Global fade based on expand_wave
	// Second wave is centered at `expand_wave - 6.5
	//float end_wave = expand_wave - 6.5 + fade_distance;
	//float global_fade = 1.0 - smoothstep(end_wave, end_wave + 1.0, d);
//
	//// Apply fade to whole effect
	//ALBEDO = final_col * global_fade;
	//ALPHA = global_fade;
	
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_crlxb"]
render_priority = 0
shader = SubResource("Shader_j7jhb")
shader_parameter/debug_time = 0.0
shader_parameter/max_radius = 10.0
shader_parameter/world_scaling = 1.0
shader_parameter/fade_distance = 2.0
shader_parameter/col_1 = Color(0.330868, 0.00645096, 1.20327e-07, 1)
shader_parameter/col_2 = Color(0.22709, 3.71509e-07, 0.0223437, 1)
shader_parameter/foam_color = Color(0.575855, 0.151486, 0.0988744, 1)
shader_parameter/foam_strength = 0.75

[sub_resource type="PlaneMesh" id="PlaneMesh_jxiw6"]
size = Vector2(20, 20)
subdivide_width = 100
subdivide_depth = 100

[node name="AcheronRadialWave" type="Node3D"]
script = ExtResource("1_crlxb")

[node name="Plane" type="MeshInstance3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -0.0323906, 0, 0)
material_override = SubResource("ShaderMaterial_crlxb")
mesh = SubResource("PlaneMesh_jxiw6")
